{"version":3,"sources":["App.tsx","bubble.ts","gravity.ts","serviceWorker.ts","index.tsx"],"names":["BoxState","bubble","array","a","out","i","length","j","number","temp","step","state","active","push","done","cocktailSort","swapped","start","end","gravity","arr","max","grid","levelcount","num","sorted","putt","generateInitialArray","size","normal","console","log","Math","floor","random","shuffleArray","sleep","ms","Promise","resolve","setTimeout","Box","bgColor","className","style","marginTop","backgroundColor","App","props","t","doSort","sortFunction","sortName","time","Date","setState","appendText","getTime","shift","forEach","lastRun","text","render","map","key","onClick","React","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e8844628.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport * as React from 'react';\r\nimport { cocktailSort, bubble } from './bubble'\r\nimport { mergeSort } from './merge'\r\nimport './App.css';\r\nimport { quick } from './quick';\r\nimport { RadixSort256 } from './radix';\r\nimport { gravity } from './gravity';\r\n\r\nconst getRandomInt = (min: number, max: number) => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\nfunction shuffleArray<T>(array: T[]): T[] {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n  return array\r\n}\r\n\r\nexport enum BoxState {\r\n  normal,\r\n  active,\r\n  done\r\n}\r\nconst generateInitialArray = (size: number): SortItem[] => {\r\n  const out = []\r\n  for (let i = 0; i < size; i++) {\r\n    out[i] = { number: i + 1, state: BoxState.normal }\r\n  }\r\n  console.log(out)\r\n  return shuffleArray<SortItem>(out);\r\n}\r\n\r\nexport const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\r\n\r\n\r\ninterface IBoxProps {\r\n  size: number\r\n  state: BoxState;\r\n  max: number;\r\n\r\n}\r\nexport interface SortItem {\r\n  number: number;\r\n  state: BoxState;\r\n}\r\ninterface IAppState {\r\n  array: SortItem[]\r\n  text: string[]\r\n  lastRun: string\r\n  max: number;\r\n}\r\n\r\nconst Box = ({ size, state, max }: IBoxProps) => {\r\n  let bgColor;\r\n  switch (state) {\r\n    case BoxState.active:\r\n      bgColor = \"red\"\r\n      break;\r\n    case BoxState.done:\r\n      bgColor = \"green\"\r\n      break;\r\n  }\r\n  return <div className='box' style={{\r\n    marginTop: size / max * 1200,\r\n    backgroundColor: bgColor\r\n  }}></div>\r\n}\r\n\r\nclass App extends React.Component<{}, IAppState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = { array: [], text: [\"bubble\", \"cocktail\", \"merge\", \"quick\", \"radix\",\"gravity\"], max: 50, lastRun: \"\" }\r\n  }\r\n  start = async (t: string) => {\r\n    switch (t) {\r\n      case \"bubble\":\r\n        await this.doSort(() => bubble(generateInitialArray(50)), \"bubble\", 50)\r\n        break;\r\n      case \"cocktail\":\r\n        await this.doSort(() => cocktailSort(generateInitialArray(50)), \"cocktail\", 50)\r\n        break\r\n      case \"gravity\":\r\n        await this.doSort(() => gravity(generateInitialArray(100)), \"gravity\", 100)\r\n        break\r\n      // case \"merge\":\r\n      //   await this.doSort(() => mergeSort([...array].slice(0, 500), 0, [...array].slice(0, 500).length - 1), \"merge\", 2)\r\n      //   break\r\n      // case \"quick\":\r\n      //   await this.doSort(() => quick([...array].slice(0, 1000), 0, [...array].slice(0, 1000).length - 1), \"quick\", 1)\r\n      //   break\r\n      // case \"radix\":\r\n      //   await this.doSort(() => RadixSort256([...array].slice(0, 1000), [...array].slice(0, 1000).length), \"radix\", 0)\r\n      //   break\r\n    }\r\n\r\n  }\r\n\r\n  doSort = async (sortFunction: () => Promise<SortItem[][]>, sortName: string, max: number) => {\r\n    const time: Date = new Date();\r\n    this.setState({ max })\r\n    let out = await sortFunction();\r\n    this.appendText(`${sortName}: ${new Date().getTime() - time.getTime()}ms`);\r\n    console.log(out.length)\r\n    while (out.length > 0) {\r\n      let a = out.shift()\r\n      if (out.length === 0){\r\n        let temp: SortItem[] = []\r\n        a?.forEach(a => {\r\n          temp.push({...a, state: BoxState.done})\r\n        });\r\n        a = [...temp]\r\n      }\r\n      await sleep(10)\r\n      this.setState({ array: a ?? [] })\r\n    }\r\n  }\r\n\r\n  appendText = (lastRun: string) => {\r\n\r\n    let arr = this.state.text\r\n    this.setState({ lastRun })\r\n  }\r\n  render = () => {\r\n    return (\r\n      <div className=\"app\">\r\n        <div className=\"display\">{this.state.lastRun}</div>\r\n        <div className='container'>\r\n          {this.state.array.map((a, i) => <Box size={a.number} state={a.state} max={this.state.max} key={i}></Box>)}\r\n        </div>\r\n        <div className='control-bar'>\r\n          <ul>{this.state.text.map(t => <li>{t}<button onClick={() => this.start(t)}>Start sort</button></li>)}</ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\n\r\nexport default App;\r\n","import { BoxState, SortItem } from './App';\r\nexport const bubble = async (array: SortItem[]) => {\r\n    let out = []\r\n    for (let i = 0; i < array.length - 1; i++) {\r\n        for (let j = 0; j < array.length - i - 1; j++) {\r\n            if (array[j].number > array[j + 1].number) {\r\n                let temp = array[j];\r\n                array[j] = array[j + 1];\r\n                array[j + 1] = temp;\r\n\r\n                \r\n                let step = [...array]\r\n                step[j] = {number: step[j].number, state: BoxState.active};\r\n                step[j+1] = {number: step[j+1].number, state: BoxState.active};\r\n                out.push(step)\r\n            }\r\n        }\r\n        array[array.length-1-i] = {number: array[array.length-1-i].number, state: BoxState.done};\r\n        out.push([...array])\r\n    }\r\n    return out;\r\n}\r\nexport const cocktailSort = async (a: SortItem[]) => {\r\n    let out = []\r\n    let swapped = true;\r\n    let start = 0;\r\n    let end = a.length;\r\n\r\n    while (swapped === true) {\r\n        // reset the swapped flag on entering the \r\n        // loop, because it might be true from a \r\n        // previous iteration. \r\n        swapped = false;\r\n\r\n        // loop from bottom to top same as \r\n        // the bubble sort \r\n        for (let i = start; i < end - 1; ++i) {\r\n            if (a[i].number > a[i + 1].number) {\r\n                let temp = a[i];\r\n                a[i] = a[i + 1];\r\n                a[i + 1] = temp;\r\n                swapped = true;\r\n                let step = [...a]\r\n                step[i] = {number: step[i].number, state: BoxState.active};\r\n                step[i+1] = {number: step[i+1].number, state: BoxState.active};\r\n                out.push(step)\r\n            }\r\n        }\r\n\r\n        // if nothing moved, then array is sorted. \r\n        if (swapped === false)\r\n            break;\r\n\r\n        // otherwise, reset the swapped flag so that it \r\n        // can be used in the next stage \r\n        swapped = false;\r\n\r\n        // move the end point back by one, because \r\n        // item at the end is in its rightful spot \r\n        end = end - 1;\r\n        if (end+1 < a.length){\r\n            a[end+1] = {number: a[end+1].number, state: BoxState.done};\r\n            out.push([...a])\r\n        }\r\n\r\n        // from top to bottom, doing the \r\n        // same comparison as in the previous stage \r\n        for (let i = end - 1; i >= start; i--) {\r\n            if (a[i].number > a[i + 1].number) {\r\n                let temp = a[i];\r\n                a[i] = a[i + 1];\r\n                a[i + 1] = temp;\r\n                swapped = true;\r\n                let step = [...a]\r\n                step[i] = {number: step[i].number, state: BoxState.active};\r\n                step[i+1] = {number: step[i+1].number, state: BoxState.active};\r\n                out.push(step)\r\n            }\r\n        }\r\n\r\n        // increase the starting point, because \r\n        // the last stage would have moved the next \r\n        // smallest number to its rightful spot. \r\n        start = start + 1;\r\n        a[start-1] = {number: a[start-1].number, state: BoxState.done};\r\n        out.push([...a])\r\n    }\r\n    return out;\r\n}","import { BoxState, SortItem } from './App';\r\nexport const gravity = async (arr: SortItem[]) =>\r\n{\r\n    let out: SortItem[][] = []\r\n    let max = arr[0].number;\r\n    for (let i = 1; i < arr.length; i++)\r\n        if (arr[i].number > max)\r\n            max = arr[i].number;\r\n\r\n    //Set up abacus\r\n    let grid: boolean[][] = [[true]];\r\n    let levelcount: number[] = [0];\r\n    for (let i = 0; i < max; i++) {\r\n        levelcount[i] = 0;\r\n        for (let j = 0; j < arr.length; j++) {\r\n            grid[i] = []\r\n            grid[i][j] = false;\r\n        }\r\n    }\r\n    //Drop the beads\r\n    for (let i = 0; i < arr.length; i++) {\r\n        let num = arr[i].number;\r\n        for (let j = 0; num > 0; j++) {\r\n            grid[j][levelcount[j]++] = true;\r\n            num--;\r\n        }\r\n        let step = [...arr]\r\n        step[i] = {number: step[i].number, state: BoxState.active};\r\n        out.push(step)\r\n    }\r\n    //Count the beads\r\n    let sorted = [...arr];\r\n    for (let i = 0; i < arr.length; i++) {\r\n        let putt = 0;\r\n        for (let j = 0; j < max && grid[j][arr.length - 1 - i]; j++)\r\n            putt++;\r\n        sorted[i] = {number: putt, state: BoxState.done};\r\n        out.push([...sorted])\r\n    }\r\n\r\n    return out;\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}