{"version":3,"sources":["bubble.ts","merge.ts","quick.ts","radix.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["bubble","array","setArray","a","i","length","j","temp","console","log","cocktailSort","swapped","start","end","merge","arr","l","m","r","setArr","n1","n2","L","R","k","mergeSort","Math","floor","partition","low","high","pivot","quick","pi","RadixSort256","n","output","count","shift","s","idx","getRandomInt","min","max","ceil","random","generateInitialArray","size","out","push","sleep","ms","Promise","resolve","setTimeout","Box","className","style","marginTop","App","props","initArray","setState","pow","state","delay","doSort","slice","sortFunction","sortName","time","Date","appendText","getTime","textToAppend","shouldShift","text","render","map","key","onClick","t","React","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5b96650b.chunk.js","sourcesContent":["export const bubble = async (array: number[], setArray: (arr: number[]) => Promise<void>) => {\r\n    for (let i = 0; i < array.length - 1; i++) {\r\n        for (let j = 0; j < array.length - i - 1; j++) {\r\n            if (array[j] > array[j + 1]) {\r\n                let temp = array[j];\r\n                array[j] = array[j + 1];\r\n                array[j + 1] = temp;\r\n                console.log(array)\r\n                await setArray(array);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport const cocktailSort = async (a: number[], setArray: (arr: number[]) => Promise<void>) => {\r\n    let swapped = true;\r\n    let start = 0;\r\n    let end = a.length;\r\n\r\n    while (swapped === true) {\r\n        // reset the swapped flag on entering the \r\n        // loop, because it might be true from a \r\n        // previous iteration. \r\n        swapped = false;\r\n\r\n        // loop from bottom to top same as \r\n        // the bubble sort \r\n        for (let i = start; i < end - 1; ++i) {\r\n            if (a[i] > a[i + 1]) {\r\n                let temp = a[i];\r\n                a[i] = a[i + 1];\r\n                a[i + 1] = temp;\r\n                swapped = true;\r\n                await setArray(a);\r\n            }\r\n        }\r\n\r\n        // if nothing moved, then array is sorted. \r\n        if (swapped === false)\r\n            break;\r\n\r\n        // otherwise, reset the swapped flag so that it \r\n        // can be used in the next stage \r\n        swapped = false;\r\n\r\n        // move the end point back by one, because \r\n        // item at the end is in its rightful spot \r\n        end = end - 1;\r\n\r\n        // from top to bottom, doing the \r\n        // same comparison as in the previous stage \r\n        for (let i = end - 1; i >= start; i--) {\r\n            if (a[i] > a[i + 1]) {\r\n                let temp = a[i];\r\n                a[i] = a[i + 1];\r\n                a[i + 1] = temp;\r\n                swapped = true;\r\n                await setArray(a);\r\n            }\r\n        }\r\n\r\n        // increase the starting point, because \r\n        // the last stage would have moved the next \r\n        // smallest number to its rightful spot. \r\n        start = start + 1;\r\n    }\r\n}","const merge = async (arr: number[], l: number, m: number, r: number, setArr:(arr: number[])=>Promise<void>) => {\r\n    // Find sizes of two subarrays to be merged \r\n    let n1 = m - l + 1;\r\n    let n2 = r - m;\r\n\r\n    /* Create temp arrays */\r\n    let L = [];\r\n    let R = [];\r\n\r\n    /*Copy data to temp arrays*/\r\n    for (let i = 0; i < n1; i++)\r\n        L[i] = arr[l + i];\r\n    for (let j = 0; j < n2; j++)\r\n        R[j] = arr[m + 1 + j];\r\n\r\n    /* Merge the temp arrays */\r\n\r\n    // Initial indexes of first and second subarrays \r\n    let i = 0, j = 0;\r\n\r\n    // Initial index of merged subarry array \r\n    let k = l;\r\n    while (i < n1 && j < n2) {\r\n        if (L[i] <= R[j]) {\r\n            arr[k] = L[i];\r\n            i++;\r\n            await setArr(arr)\r\n        }else {\r\n            arr[k] = R[j];\r\n            j++;\r\n            await setArr(arr)\r\n        }\r\n        k++;\r\n    }\r\n\r\n    /* Copy remaining elements of L[] if any */\r\n    while (i < n1) {\r\n        arr[k] = L[i];\r\n        i++;\r\n        k++;\r\n        await setArr(arr)\r\n    }\r\n\r\n    /* Copy remaining elements of R[] if any */\r\n    while (j < n2) {\r\n        arr[k] = R[j];\r\n        j++;\r\n        k++;\r\n        await setArr(arr)\r\n    }\r\n}\r\n\r\n// Main function that sorts arr[l..r] using \r\n// merge() \r\nexport const mergeSort = async (arr: number[], l: number, r: number, setArr:(arr: number[])=>Promise<void>) => {\r\n    if (l < r) {\r\n        // Find the middle point \r\n        let m = Math.floor((l + r) / 2);\r\n\r\n        // Sort first and second halves \r\n        await mergeSort(arr, l, m, setArr);\r\n        await mergeSort(arr, m + 1, r, setArr);\r\n\r\n        // Merge the sorted halves \r\n        await merge(arr, l, m, r, setArr);\r\n    }\r\n} ","const partition = async (arr: number[], low: number, high: number, setArr: (arr: number[]) => Promise<void>) => {\r\n    let pivot = arr[high];\r\n    let i = (low - 1); // index of smaller element \r\n    for (let j = low; j < high; j++) {\r\n        // If current element is smaller than the pivot \r\n        if (arr[j] < pivot) {\r\n            i++;\r\n\r\n            // swap arr[i] and arr[j] \r\n            let temp = arr[i];\r\n            arr[i] = arr[j];\r\n            arr[j] = temp;\r\n            await setArr(arr)\r\n        }\r\n    }\r\n\r\n    // swap arr[i+1] and arr[high] (or pivot) \r\n    let temp = arr[i + 1];\r\n    arr[i + 1] = arr[high];\r\n    arr[high] = temp;\r\n\r\n    await setArr(arr)\r\n\r\n    return i + 1;\r\n}\r\n\r\n\r\n/* The main function that implements QuickSort() \r\n  arr[] --> Array to be sorted, \r\n  low  --> Starting index, \r\n  high  --> Ending index */\r\nexport const quick = async (arr: number[], low: number, high: number, setArr: (arr: number[]) => Promise<void>) => {\r\n    if (low < high) {\r\n        /* pi is partitioning index, arr[pi] is  \r\n          now at right place */\r\n        let pi = await partition(arr, low, high, setArr);\r\n\r\n        // Recursively sort elements before \r\n        // partition and after partition \r\n        await quick(arr, low, pi - 1, setArr);\r\n        await quick(arr, pi + 1, high, setArr);\r\n    }\r\n} ","\r\nexport const RadixSort256 = async (arr: number[], n: number, setArr:(arr: number[])=> Promise<void>) =>\r\n{\r\n if (n <= 1) return; // Added base case\r\n\r\n let output: number[] = [...arr]; // output array\r\n \r\n let count: number[] = [];\r\n\r\n for (let shift = 0, s = 0; shift < 4; shift++, s += 8)\r\n {\r\n  // Zero the counts\r\n  for (let i = 0; i < 256; i++)\r\n   count[i] = 0;\r\n\r\n  // Store count of occurrences in count[] \r\n  for (let i = 0; i < n; i++)\r\n   count[(arr[i] >> s)&0xff]++;\r\n\r\n  // Change count[i] so that count[i] now contains \r\n  // actual position of this digit in output[] \r\n  for (let i = 1; i < 256; i++)\r\n   count[i] += count[i - 1];\r\n\r\n  // Build the output array \r\n  for (let i = n - 1; i >= 0; i--)\r\n  {\r\n   // precalculate the offset as it's a few instructions\r\n   let idx = (arr[i] >> s) & 0xff;\r\n\r\n   // Subtract from the count and store the value\r\n   output[--count[idx]] = arr[i];\r\n   await setArr(output)\r\n  }\r\n\r\n  // Copy the output array to input[], so that input[] \r\n  // is sorted according to current digit\r\n\r\n  arr = [...output];\r\n }\r\n\r\n}","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from 'react';\nimport { cocktailSort, bubble } from './bubble'\nimport { mergeSort } from './merge'\nimport './App.css';\nimport { quick } from './quick';\nimport { RadixSort256 } from './radix';\n\nconst getRandomInt = (min: number, max: number) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\n\nconst generateInitialArray = (size: number, min: number, max: number) => {\n  const out = []\n  for (let i = 0; i < size; i++) {\n    out.push(getRandomInt(min, max));\n  }\n  return out;\n}\n\nexport const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\n\n\ninterface IBoxProps {\n  size: number\n}\ninterface IAppState {\n  array: number[]\n  text: string[]\n  delay: number\n}\n\nconst Box = ({ size }: IBoxProps) => {\n  return <div className='box' style={{ marginTop: size / 4294967 }}></div>\n}\n\nclass App extends React.Component<{}, IAppState> {\n  constructor(props: any) {\n    super(props);\n    this.state = { array: [], text: [], delay: 1 }\n  }\n  initArray = () => {\n    this.setState({ array: generateInitialArray(5000, 0, Math.pow(256, 4)) })\n  }\n  start = async (array: number[]) => {\n    const setArray = async (array: number[]) => {\n      this.setState({ array });\n      await sleep(this.state.delay)\n    };\n\n    await this.doSort(() => bubble([...array].slice(0, 100), setArray), \"bubble\", 0)\n    await this.doSort(() => cocktailSort([...array].slice(0, 100), setArray), \"cocktail\", 1)\n    await this.doSort(() => mergeSort([...array].slice(0, 500), 0, [...array].slice(0, 500).length - 1, setArray), \"merge\", 2)\n    await this.doSort(() => quick([...array].slice(0, 1000), 0, [...array].slice(0, 1000).length - 1, setArray), \"quick\", 1)\n    await this.doSort(() => RadixSort256([...array].slice(0, 5000), [...array].slice(0, 5000).length, setArray), \"radix\", 0)\n  }\n\n  doSort = async (sortFunction: () => Promise<void>, sortName: string, delay: number) => {\n    const time: Date = new Date();\n    this.appendText(sortName, false, delay)\n    await sortFunction();\n    this.appendText(`${sortName}: ${new Date().getTime() - time.getTime()}ms`, true);\n  }\n\n  appendText = (textToAppend: string, shouldShift: boolean, delay: number = 1) => {\n\n    let arr = this.state.text\n    shouldShift && arr.shift()\n    this.setState({ text: [textToAppend, ...arr], delay })\n  }\n  render = () => {\n    // console.log(this.state.array)\n    return (\n      <div className=\"app\">\n        <div className='container'>\n          {this.state.array.map((a, i) => <Box size={a} key={i}></Box>)}\n        </div>\n        <div className='control-bar'>\n          <button onClick={() => this.start(this.state.array)}>Start sort</button>\n          <button onClick={this.initArray}>Init Array</button>\n          <ul>{this.state.text.map(t => <li>{t}</li>)}</ul>\n        </div>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}