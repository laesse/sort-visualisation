{"version":3,"sources":["bubble.ts","merge.ts","quick.ts","radix.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["bubble","array","setArray","a","i","length","j","temp","console","log","sleep","cocktailSort","swapped","start","end","merge","arr","l","m","r","setArr","n1","n2","L","R","k","mergeSort","Math","floor","partition","low","high","pivot","quick","pi","RadixSort256","n","output","count","shift","s","idx","getRandomInt","min","max","ceil","random","generateInitialArray","size","out","push","ms","Promise","resolve","setTimeout","Box","className","style","marginTop","App","props","initArray","setState","pow","doSort","sortFunction","sortName","time","Date","appendText","getTime","textToAppend","shouldShift","state","text","render","map","key","onClick","t","React","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3b336a29.chunk.js","sourcesContent":["import { sleep } from \"./App\";\r\n\r\nexport const bubble = async (array: number[], setArray: (arr: number[]) => void) => {\r\n    for (let i = 0; i < array.length - 1; i++) {\r\n        for (let j = 0; j < array.length - i - 1; j++) {\r\n            if (array[j] > array[j + 1]) {\r\n                let temp = array[j];\r\n                array[j] = array[j + 1];\r\n                array[j + 1] = temp;\r\n                console.log(array)\r\n                setArray(array);\r\n                await sleep(5);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport const cocktailSort = async (a: number[], setArray: (arr: number[]) => void) => {\r\n    let swapped = true;\r\n    let start = 0;\r\n    let end = a.length;\r\n\r\n    while (swapped === true) {\r\n        // reset the swapped flag on entering the \r\n        // loop, because it might be true from a \r\n        // previous iteration. \r\n        swapped = false;\r\n\r\n        // loop from bottom to top same as \r\n        // the bubble sort \r\n        for (let i = start; i < end - 1; ++i) {\r\n            if (a[i] > a[i + 1]) {\r\n                let temp = a[i];\r\n                a[i] = a[i + 1];\r\n                a[i + 1] = temp;\r\n                swapped = true;\r\n                setArray(a);\r\n                await sleep(5);\r\n            }\r\n        }\r\n\r\n        // if nothing moved, then array is sorted. \r\n        if (swapped === false)\r\n            break;\r\n\r\n        // otherwise, reset the swapped flag so that it \r\n        // can be used in the next stage \r\n        swapped = false;\r\n\r\n        // move the end point back by one, because \r\n        // item at the end is in its rightful spot \r\n        end = end - 1;\r\n\r\n        // from top to bottom, doing the \r\n        // same comparison as in the previous stage \r\n        for (let i = end - 1; i >= start; i--) {\r\n            if (a[i] > a[i + 1]) {\r\n                let temp = a[i];\r\n                a[i] = a[i + 1];\r\n                a[i + 1] = temp;\r\n                swapped = true;\r\n                setArray(a);\r\n                await sleep(5);\r\n            }\r\n        }\r\n\r\n        // increase the starting point, because \r\n        // the last stage would have moved the next \r\n        // smallest number to its rightful spot. \r\n        start = start + 1;\r\n    }\r\n}","import { sleep } from \"./App\";\r\n\r\nconst merge = async (arr: number[], l: number, m: number, r: number, setArr:(arr: number[])=>void) => {\r\n    // Find sizes of two subarrays to be merged \r\n    let n1 = m - l + 1;\r\n    let n2 = r - m;\r\n\r\n    /* Create temp arrays */\r\n    let L = [];\r\n    let R = [];\r\n\r\n    /*Copy data to temp arrays*/\r\n    for (let i = 0; i < n1; i++)\r\n        L[i] = arr[l + i];\r\n    for (let j = 0; j < n2; j++)\r\n        R[j] = arr[m + 1 + j];\r\n\r\n    /* Merge the temp arrays */\r\n\r\n    // Initial indexes of first and second subarrays \r\n    let i = 0, j = 0;\r\n\r\n    // Initial index of merged subarry array \r\n    let k = l;\r\n    while (i < n1 && j < n2) {\r\n        if (L[i] <= R[j]) {\r\n            arr[k] = L[i];\r\n            i++;\r\n            setArr(arr)\r\n            await sleep(5)\r\n        }else {\r\n            arr[k] = R[j];\r\n            j++;\r\n            setArr(arr)\r\n            await sleep(5)\r\n        }\r\n        k++;\r\n    }\r\n\r\n    /* Copy remaining elements of L[] if any */\r\n    while (i < n1) {\r\n        arr[k] = L[i];\r\n        i++;\r\n        k++;\r\n        setArr(arr)\r\n        await sleep(5)\r\n    }\r\n\r\n    /* Copy remaining elements of R[] if any */\r\n    while (j < n2) {\r\n        arr[k] = R[j];\r\n        j++;\r\n        k++;\r\n        setArr(arr)\r\n        await sleep(5)\r\n    }\r\n}\r\n\r\n// Main function that sorts arr[l..r] using \r\n// merge() \r\nexport const mergeSort = async (arr: number[], l: number, r: number, setArr:(arr: number[])=>void) => {\r\n    if (l < r) {\r\n        // Find the middle point \r\n        let m = Math.floor((l + r) / 2);\r\n\r\n        // Sort first and second halves \r\n        await mergeSort(arr, l, m, setArr);\r\n        await mergeSort(arr, m + 1, r, setArr);\r\n\r\n        // Merge the sorted halves \r\n        await merge(arr, l, m, r, setArr);\r\n    }\r\n} ","import { sleep } from \"./App\";\r\n\r\nconst partition = async (arr: number[], low: number, high: number, setArr: (arr: number[]) => void) => {\r\n    let pivot = arr[high];\r\n    let i = (low - 1); // index of smaller element \r\n    for (let j = low; j < high; j++) {\r\n        // If current element is smaller than the pivot \r\n        if (arr[j] < pivot) {\r\n            i++;\r\n\r\n            // swap arr[i] and arr[j] \r\n            let temp = arr[i];\r\n            arr[i] = arr[j];\r\n            arr[j] = temp;\r\n            setArr(arr)\r\n            await sleep(5)\r\n        }\r\n    }\r\n\r\n    // swap arr[i+1] and arr[high] (or pivot) \r\n    let temp = arr[i + 1];\r\n    arr[i + 1] = arr[high];\r\n    arr[high] = temp;\r\n\r\n    setArr(arr)\r\n    await sleep(5)\r\n\r\n    return i + 1;\r\n}\r\n\r\n\r\n/* The main function that implements QuickSort() \r\n  arr[] --> Array to be sorted, \r\n  low  --> Starting index, \r\n  high  --> Ending index */\r\nexport const quick = async (arr: number[], low: number, high: number, setArr: (arr: number[]) => void) => {\r\n    if (low < high) {\r\n        /* pi is partitioning index, arr[pi] is  \r\n          now at right place */\r\n        let pi = await partition(arr, low, high, setArr);\r\n\r\n        // Recursively sort elements before \r\n        // partition and after partition \r\n        await quick(arr, low, pi - 1, setArr);\r\n        await quick(arr, pi + 1, high, setArr);\r\n    }\r\n} ","import { sleep } from \"./App\";\r\n\r\n\r\nexport const RadixSort256 = async (arr: number[], n: number, setArr:(arr: number[])=>void) =>\r\n{\r\n if (n <= 1) return; // Added base case\r\n\r\n let output: number[] = [...arr]; // output array\r\n \r\n let count: number[] = [];\r\n\r\n for (let shift = 0, s = 0; shift < 4; shift++, s += 8)\r\n {\r\n  // Zero the counts\r\n  for (let i = 0; i < 256; i++)\r\n   count[i] = 0;\r\n\r\n  // Store count of occurrences in count[] \r\n  for (let i = 0; i < n; i++)\r\n   count[(arr[i] >> s)&0xff]++;\r\n\r\n  // Change count[i] so that count[i] now contains \r\n  // actual position of this digit in output[] \r\n  for (let i = 1; i < 256; i++)\r\n   count[i] += count[i - 1];\r\n\r\n  // Build the output array \r\n  for (let i = n - 1; i >= 0; i--)\r\n  {\r\n   // precalculate the offset as it's a few instructions\r\n   let idx = (arr[i] >> s) & 0xff;\r\n\r\n   // Subtract from the count and store the value\r\n   output[--count[idx]] = arr[i];\r\n   setArr(output)\r\n   await sleep(5)\r\n  }\r\n\r\n  // Copy the output array to input[], so that input[] \r\n  // is sorted according to current digit\r\n\r\n  arr = [...output];\r\n }\r\n\r\n}","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from 'react';\nimport { cocktailSort, bubble } from './bubble'\nimport { mergeSort } from './merge'\nimport './App.css';\nimport { quick } from './quick';\nimport { RadixSort256 } from './radix';\n\nconst getRandomInt = (min: number, max: number) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\n\nconst generateInitialArray = (size: number, min: number, max: number) => {\n  const out = []\n  for (let i = 0; i < size; i++) {\n    out.push(getRandomInt(min, max));\n  }\n  return out;\n}\ninterface IBoxProps {\n  size: number\n}\ntype TimerIno = {\n  date: Date\n}\ninterface IAppState {\n  array: number[]\n  text: string[]\n}\n\nexport const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\n\n\n\nconst Box = ({ size }: IBoxProps) => {\n  return <div className='box' style={{ marginTop: size/4294967 }}></div>\n}\nlet time: Date;\nconst startTime = () => {\n  time = new Date();\n}\nconst endTime = ():number => new Date().getTime() - time.getTime() \n\nclass App extends React.Component<{}, IAppState> {\n  constructor(props: any) {\n    super(props);\n    this.state =  { array: [], text: []}\n  }\n  initArray = () => {\n    this.setState({array: generateInitialArray(1000, 0, Math.pow(256,4))})\n  }\n  start = async (array: number[]) => {\n    const setArray = (array: number[]) => this.setState({ array });\n\n    await this.doSort(()=> bubble([...array], setArray), \"bubble\")\n    await this.doSort(()=> cocktailSort([...array], setArray), \"cocktail\")\n    await this.doSort(()=> mergeSort([...array], 0, array.length-1, setArray), \"merge\")\n    await this.doSort(()=> quick([...array], 0, array.length-1, setArray), \"quick\")\n    await this.doSort(()=> RadixSort256([...array], array.length, setArray), \"radix\")\n  }\n\n  doSort = async (sortFunction: () => Promise<void>, sortName: string) => {\n    const time: Date = new Date();\n    this.appendText(sortName, false)\n    await sortFunction();\n    this.appendText(`${sortName}: ${new Date().getTime() - time.getTime() }ms`, true);\n  }\n\n  appendText = (textToAppend: string, shouldShift: boolean) => {\n\n    let arr = this.state.text\n    shouldShift && arr.shift()\n    this.setState({text:  [textToAppend,...arr]})\n  }\n  render = () => {\n    // console.log(this.state.array)\n    return (\n      <div className=\"app\">\n        <div className='container'>\n          {this.state.array.map((a, i) => <Box size={a} key={i}></Box>)}\n        </div>\n        <div className='control-bar'>\n          <button onClick={() => this.start(this.state.array)}>Start sort</button>\n          <button onClick={this.initArray}>Init Array</button>\n          <ul>{this.state.text.map(t => <li>{t}</li>)}</ul>\n        </div>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}