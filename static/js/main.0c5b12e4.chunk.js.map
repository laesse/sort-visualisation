{"version":3,"sources":["radix.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["RadixSort256","arr","n","setArr","a","output","count","shift","s","i","idx","getRandomInt","min","max","Math","ceil","floor","random","generateInitialArray","size","out","push","sleep","ms","Promise","resolve","setTimeout","Box","className","style","marginTop","App","props","initArray","setState","array","pow","start","setArray","state","delay","doSort","slice","length","sortFunction","sortName","time","Date","appendText","getTime","textToAppend","shouldShift","text","render","map","key","onClick","t","React","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0c5b12e4.chunk.js","sourcesContent":["\r\nexport const RadixSort256 = async (arr: number[], n: number, setArr:(arr: number[])=> Promise<void>) =>\r\n{\r\n if (n <= 1) return; // Added base case\r\n\r\n let output: number[] = [...arr]; // output array\r\n \r\n let count: number[] = [];\r\n\r\n for (let shift = 0, s = 0; shift < 4; shift++, s += 8)\r\n {\r\n  // Zero the counts\r\n  for (let i = 0; i < 256; i++)\r\n   count[i] = 0;\r\n\r\n  // Store count of occurrences in count[] \r\n  for (let i = 0; i < n; i++)\r\n   count[(arr[i] >> s)&0xff]++;\r\n\r\n  // Change count[i] so that count[i] now contains \r\n  // actual position of this digit in output[] \r\n  for (let i = 1; i < 256; i++)\r\n   count[i] += count[i - 1];\r\n\r\n  // Build the output array \r\n  for (let i = n - 1; i >= 0; i--)\r\n  {\r\n   // precalculate the offset as it's a few instructions\r\n   let idx = (arr[i] >> s) & 0xff;\r\n\r\n   // Subtract from the count and store the value\r\n   output[--count[idx]] = arr[i];\r\n   await setArr(output)\r\n  }\r\n\r\n  // Copy the output array to input[], so that input[] \r\n  // is sorted according to current digit\r\n\r\n  arr = [...output];\r\n }\r\n\r\n}","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport * as React from 'react';\nimport { cocktailSort, bubble } from './bubble'\nimport { mergeSort } from './merge'\nimport './App.css';\nimport { quick } from './quick';\nimport { RadixSort256 } from './radix';\n\nconst getRandomInt = (min: number, max: number) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\n\nconst generateInitialArray = (size: number, min: number, max: number) => {\n  const out = []\n  for (let i = 0; i < size; i++) {\n    out.push(getRandomInt(min, max));\n  }\n  return out;\n}\n\nexport const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\n\n\ninterface IBoxProps {\n  size: number\n}\ninterface IAppState {\n  array: number[]\n  text: string[]\n  delay: number\n}\n\nconst Box = ({ size }: IBoxProps) => {\n  return <div className='box' style={{ marginTop: size/4294967 }}></div>\n}\n\nclass App extends React.Component<{}, IAppState> {\n  constructor(props: any) {\n    super(props);\n    this.state =  { array: [], text: [], delay: 1}\n  }\n  initArray = () => {\n    this.setState({array: generateInitialArray(5000, 0, Math.pow(256,4))})\n  }\n  start = async (array: number[]) => {\n    const setArray = async (array: number[]) => {\n      this.setState({ array });\n      await sleep(this.state.delay)\n      };\n\n    //await this.doSort(()=> bubble([...array].slice(0,100), setArray), \"bubble\", 0)\n    //await this.doSort(()=> cocktailSort([...array].slice(0,100), setArray), \"cocktail\", 1)\n    // await this.doSort(()=> mergeSort([...array].slice(0,500), 0, [...array].slice(0,500).length-1, setArray), \"merge\", 2)\n   // await this.doSort(()=> quick([...array].slice(0,1000), 0, [...array].slice(0,1000).length-1, setArray), \"quick\", 1)\n    await this.doSort(()=> RadixSort256([...array].slice(0,5000), [...array].slice(0,5000).length, setArray), \"radix\", 0)\n  }\n\n  doSort = async (sortFunction: () => Promise<void>, sortName: string, delay:number) => {\n    const time: Date = new Date();\n    this.appendText(sortName, false, delay)\n    await sortFunction();\n    this.appendText(`${sortName}: ${new Date().getTime() - time.getTime() }ms`, true);\n  }\n\n  appendText = (textToAppend: string, shouldShift: boolean, delay: number = 1) => {\n\n    let arr = this.state.text\n    shouldShift && arr.shift()\n    this.setState({text:  [textToAppend,...arr], delay})\n  }\n  render = () => {\n    // console.log(this.state.array)\n    return (\n      <div className=\"app\">\n        <div className='container'>\n          {this.state.array.map((a, i) => <Box size={a} key={i}></Box>)}\n        </div>\n        <div className='control-bar'>\n          <button onClick={() => this.start(this.state.array)}>Start sort</button>\n          <button onClick={this.initArray}>Init Array</button>\n          <ul>{this.state.text.map(t => <li>{t}</li>)}</ul>\n        </div>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}